basePath: /api
definitions:
  authpb.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  authpb.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  authpb.UserIDResponse:
    properties:
      id:
        type: string
    type: object
  orderpb.CreateOrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/orderpb.Item'
        type: array
      restaurant_id:
        type: string
      status:
        type: string
      total_price:
        type: number
      user_id:
        type: string
    type: object
  orderpb.Item:
    properties:
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  orderpb.UpdateOrderRequest:
    properties:
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/orderpb.Item'
        type: array
      status:
        type: string
      total_price:
        type: number
    type: object
  response.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: invalid request
        type: string
    type: object
  response.OrderResponse:
    properties:
      created_at:
        example: "2024-05-12T12:00:00Z"
        type: string
      id:
        example: "123"
        type: string
      price:
        type: number
      restaurant_id:
        type: string
      status:
        type: string
      updated_at:
        example: "2024-05-12T13:00:00Z"
        type: string
      user_id:
        type: string
    type: object
  response.RestaurantResponse:
    properties:
      created_at:
        example: "2024-05-12T12:00:00Z"
        type: string
      description:
        type: string
      id:
        example: resto-456
        type: string
      location:
        example: 123 Main St
        type: string
      name:
        example: Best Pizza
        type: string
      orders:
        example:
        - '["order-1"'
        - ' "order-2"]'
        items:
          type: string
        type: array
      updated_at:
        example: "2024-05-12T13:00:00Z"
        type: string
    type: object
  response.UserResponse:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: user-123
        type: string
      name:
        example: John Doe
        type: string
      role:
        example: customer
        type: string
    type: object
  restaurantpb.CreateRestaurantRequest:
    properties:
      address:
        type: string
      name:
        type: string
      order_ids:
        items:
          type: string
        type: array
      phone:
        type: string
    type: object
  restaurantpb.UpdateRestaurantRequest:
    properties:
      address:
        type: string
      id:
        type: string
      name:
        type: string
      order_ids:
        items:
          type: string
        type: array
      phone:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Gateway for microservices
  title: Food Delivery API Gateway
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя и получение токена
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authpb.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Авторизация
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создание нового пользователя
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authpb.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/authpb.UserIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Регистрация
      tags:
      - auth
  /order/{id}:
    get:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - orders
  /order/{id}/delete:
    delete:
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete order by ID
      tags:
      - orders
  /order/{id}/status:
    put:
      consumes:
      - application/json
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/orderpb.UpdateOrderRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - orders
  /order/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.OrderResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all orders
      tags:
      - orders
  /order/create:
    post:
      consumes:
      - application/json
      description: Create and return a new order
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/orderpb.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /order/restaurant/{id}:
    get:
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.OrderResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List orders by restaurant ID
      tags:
      - orders
  /order/user/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.OrderResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List orders by user ID
      tags:
      - orders
  /restaurant/{id}:
    delete:
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a restaurant
      tags:
      - restaurants
    get:
      description: Retrieve a specific restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RestaurantResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get restaurant by ID
      tags:
      - restaurants
    put:
      consumes:
      - application/json
      description: Update restaurant details
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/restaurantpb.UpdateRestaurantRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a restaurant
      tags:
      - restaurants
  /restaurant/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.RestaurantResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all restaurants
      tags:
      - restaurants
  /restaurant/create:
    post:
      consumes:
      - application/json
      description: Create and return a restaurant
      parameters:
      - description: Restaurant info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/restaurantpb.CreateRestaurantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.RestaurantResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new restaurant
      tags:
      - restaurants
  /user/{id}:
    get:
      description: Get a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /user/all:
    get:
      description: Retrieve all registered users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
